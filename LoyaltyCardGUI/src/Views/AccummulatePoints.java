/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import Controllers.PinController;
import Controllers.PointController;
import Controllers.RSAController;
import Controllers.SmartCardConnection;
import Controllers.UserDataController;
import Models.UserData;
import constants.AppletConstants;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import utils.ErrorHandleUtils;
import utils.NumberUtils;

import Controllers.PinController;
import Controllers.PointController;
import Controllers.RSAController;
import Controllers.SmartCardConnection;
import Controllers.UserDataController;
import DAO.InvoiceDao;
import DAO.PointTransactionDao;
import DAO.UserDao;
import Models.Invoice;
import Models.Order;
import Models.PointsTransaction;
import Models.UserData;
import constants.AppletConstants;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import utils.ErrorHandleUtils;
import utils.NumberUtils;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatLightLaf;
import constants.Constants;
import java.awt.Color;
import java.awt.Font;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.List;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author datlogarit
 */
public class AccummulatePoints extends javax.swing.JFrame {

    /**
     * Creates new form AccummulatePoints
     */
    SmartCardConnection smartCardConnection;
    PointController pointController;
    PinController pinController;
    UserDataController userDataController;
    UserData userData;
    private static Invoice invoice;

    public AccummulatePoints(UserData userData) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.userData = userData;
        smartCardConnection = SmartCardConnection.getInstance();
        pointController = new PointController(smartCardConnection);
        pinController = new PinController(smartCardConnection);
        userDataController = new UserDataController(smartCardConnection);
        initViews();
    }

    private AccummulatePoints() {

    }

    private void initViews() {
        currentPointView.setText(userData.getPoints() + "");
        jTable1.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 12));
        jTable1.getTableHeader().setOpaque(false);
        jTable1.getTableHeader().setBackground(new Color(204, 255, 255));
        jTable1.getTableHeader().setForeground(new Color(255, 255, 255));
        jTable1.setRowHeight(25);
        jTextField1.putClientProperty(FlatClientProperties.PLACEHOLDER_TEXT, "Nhập mã hóa đơn để tìm kiếm");
        jLabel5.setText("");
        currentPointView.setText("");
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
                null,
                new String[]{
                    "STT", "Tên Mặt Hàng", "Số Lượng", "Đơn Giá", "Thành Tiền"
                }
        ));

        DefaultTableCellRenderer headerRenderer = new DefaultTableCellRenderer();
        headerRenderer.setBackground(new Color(204, 255, 255));

        for (int i = 0; i < jTable1.getModel().getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setHeaderRenderer(headerRenderer);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        currentPointView = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jScrollPane1 = new scroll.win11.ScrollPaneWin11();
        jTable1 = new javax.swing.JTable();
        lb_background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Tỷ giá quy đổi: 1.000đ = 1 điểm");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 420, -1, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Số điểm thực nhận: ");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 450, -1, -1));

        jButton1.setBackground(new java.awt.Color(204, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("Xác nhận ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 490, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel4.setText("TÍCH LŨY ĐIỂM THƯỞNG");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 40, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("2.002.000đ");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 380, -1, -1));

        currentPointView.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        currentPointView.setText("2002");
        getContentPane().add(currentPointView, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 450, -1, -1));

        jButton2.setBackground(new java.awt.Color(204, 204, 255));
        jButton2.setForeground(new java.awt.Color(0, 0, 51));
        jButton2.setText("Quay lại");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 107, -1));

        jLabel7.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel7.setText("Nhập mã hóa đơn:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, -1, -1));

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 130, 180, -1));

        jButton3.setBackground(new java.awt.Color(204, 204, 255));
        jButton3.setForeground(new java.awt.Color(0, 0, 51));
        jButton3.setText("Tìm kiếm");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 130, 107, -1));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Thông tin hóa đơn");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 160, -1, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 3, 14)); // NOI18N
        jLabel14.setText("Tổng tiền");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 380, -1, -1));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "STT", "Tên Mặt Hàng", "Số Lượng", "Đơn Giá", "Thành Tiền"
            }
        )
        {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }

    );
    jTable1.setFocusable(false);
    jTable1.setGridColor(new java.awt.Color(255, 255, 255));
    jTable1.setSelectionBackground(new java.awt.Color(176, 213, 199));
    jTable1.setShowVerticalLines(true);
    jTable1.getTableHeader().setResizingAllowed(false);
    jTable1.getTableHeader().setReorderingAllowed(false);
    jScrollPane1.setViewportView(jTable1);

    getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 560, 190));

    lb_background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Res/background_900x600.jpg"))); // NOI18N
    lb_background.setText("jLabel7");
    getContentPane().add(lb_background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 680, 550));

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
//            String pointInString = pointTextField.getText();
//            short number = NumberUtils.validateAndConvertToShort(pointInString);
            String pointStr = currentPointView.getText();
            if (pointStr == null || pointStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Điểm không hợp lệ");
                jTextField1.requestFocus();
                return;
            }
            short point = Short.valueOf(pointStr);
            JFrame frame = new JFrame("Nhập mã PIN");
            JPasswordField passwordField = new JPasswordField(10);
            int option = JOptionPane.showConfirmDialog(frame, passwordField, "Nhập mã PIN", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if (option == JOptionPane.OK_OPTION) {
                char[] pin = passwordField.getPassword();
                String pinStr = new String(pin);
                System.out.println("Mã PIN bạn nhập là: " + pinStr);
                onHandleAccummulatePoint(pinStr, point);
            }
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        } catch (Exception e) {
            ErrorHandleUtils.handleErrorWithException(this, e, "Điểm không hợp lệ");
        } finally {
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void onHandleAccummulatePoint(String pin, short number) {
        if (pin != null && !pin.isEmpty()) {
            try {
                int pinTries = pinController.verifyPin(pin);
                if (pinTries == AppletConstants.VERIFY_SUCCESS) {
                    RSAController rsaController = new RSAController(userDataController);
                    boolean isVerifyRSA = rsaController.verifyRSA(this, userData.getPublicKey());
                    if (!isVerifyRSA) {
                        JOptionPane.showMessageDialog(this, "Xác thực RSA thất bại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    boolean isSucess = pointController.updatePoint(number, true);
                    if (isSucess) {
                        userData.setPoints((short) (userData.getPoints() + number));
                        insertTrans(number);
                        UserDao.getInstance().updateUser(userData);
                        JOptionPane.showMessageDialog(this, "Tích điểm thành công", "Thành công", JOptionPane.INFORMATION_MESSAGE);
                        onBackToHomeView(userData);
                    } else {
                        JOptionPane.showMessageDialog(this, "Tích điểm không thành công", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Mã PIN sai. Vui lòng thử lại. Bạn còn " + pinTries + " lần", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Mã PIN sai. Vui lòng thử lại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Mã PIN không thể trống.", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void insertTrans(short point) throws ClassNotFoundException {
        PointsTransaction pointsTransaction = new PointsTransaction();
        pointsTransaction.setPoints(point);
        pointsTransaction.setResourceId(invoice.getId());
        pointsTransaction.setTransactionType(Constants.TRANSACTION_TYPE.ADD);
        pointsTransaction.setUserId(userData.getId());
        pointsTransaction.setDescription("Cộng điểm từ hóa đơn.");
        PointTransactionDao.getInstance().insertPointTransaction(pointsTransaction);
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        onBackToHomeView(userData);
    }

    private void onBackToHomeView() {
        HomeView homeView = new HomeView();
        this.dispose();
        homeView.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void onBackToHomeView(UserData user) {
        HomeView homeView = new HomeView(user);
        this.dispose();
        homeView.setVisible(true);
    }
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        NumberFormat numberFormat = NumberFormat.getInstance(new Locale("vi", "VN"));
        String invoiceCode = jTextField1.getText();
        if (invoiceCode == null || invoiceCode.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Mã hóa đơn không được để trống");
            jTextField1.requestFocus();
            return;
        }
        try {
            Invoice invoice = InvoiceDao.getInstance().getInvoiceByCode(invoiceCode);
            if (invoice == null) {
                JOptionPane.showMessageDialog(this, "Hoá đơn không tồn tại");
                return;
            }
            this.invoice = invoice;
            List<Order> orders = invoice.getOrders();
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            model.setRowCount(0);
            int stt = 1; // Bắt đầu từ 1
            for (Order order : orders) {
                model.addRow(new Object[]{
                    stt, // Gán số thứ tự
                    order.getProductName(),
                    order.getQuantity(),
                    numberFormat.format(Math.round(order.getPrice())) + "đ",
                    numberFormat.format(Math.round(order.getQuantity() * order.getPrice())) + "đ"
                });
                stt++; // Tăng số thứ tự
            }
            long totalAmount = Math.round(invoice.getTotalAmount());
            jLabel5.setText(numberFormat.format(totalAmount) + "đ");
            long point = Math.round(invoice.getTotalAmount() / 1000);
            currentPointView.setText(String.valueOf(point));
        } catch (Exception e) {
            System.out.println(e.getMessage());
            JOptionPane.showMessageDialog(this, "Có lỗi xảy ra");
            return;
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        FlatLightLaf.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccummulatePoints().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentPointView;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lb_background;
    // End of variables declaration//GEN-END:variables
}
